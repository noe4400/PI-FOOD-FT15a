{"ast":null,"code":"var _jsxFileName = \"/home/noe4400/Documents/react-projects/PI-FOOD-FT15a/client/src/components/ActivityForm/RecipeForm.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./RecipeForm.css\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getDietTypes, postRecipe, setLoading } from \"../../actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RecipeForm = () => {\n  _s();\n\n  const isLoading = useSelector(state => state.isLoading);\n  const postErr = useSelector(state => state.postErr);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getDietTypes());\n  }, []);\n  const [userInput, setInput] = useState({\n    name: \"\",\n    score: 0,\n    healthScore: 0,\n    summary: \"\",\n    steps: \"\",\n    dietTypesArray: [],\n    hasBeenSubmitted: false\n  });\n  const [inputValidation, setInputValidation] = useState({\n    isInputNameTouch: false,\n    isSummaryInputTouched: false\n  });\n  const enteredRecipesName = userInput.name.trim() !== \"\";\n  const enteredSummary = userInput.summary.trim() !== \"\";\n  const recipeNameIsValid = !enteredRecipesName && inputValidation.isInputNameTouch;\n  const summaryIsValid = !enteredSummary && inputValidation.isSummaryInputTouched;\n\n  const onBlurHandlerValidation = e => {\n    setInputValidation(prevState => {\n      if (e.target.name === \"name\") return { ...prevState,\n        isInputNameTouch: true\n      };\n      if (e.target.name === \"summary\") return { ...prevState,\n        isSummaryInputTouched: true\n      };\n    });\n  };\n\n  let isFormValid = false;\n\n  if (enteredRecipesName && enteredSummary) {\n    isFormValid = true;\n  }\n\n  const submitHandler = e => {\n    e.preventDefault();\n    setInputValidation(prevState => {\n      return { ...prevState,\n        isInputNameTouch: false,\n        isSummaryInputTouched: false\n      };\n    });\n    dispatch(setLoading(true));\n    dispatch(postRecipe(userInput));\n    setInput(prevState => {\n      return { ...prevState,\n        name: \"\",\n        score: 0,\n        healthScore: 0,\n        summary: \"\",\n        steps: \"\",\n        dietTypesArray: [],\n        hasBeenSubmitted: true\n      };\n    });\n  };\n\n  const dietTypes = useSelector(state => state.dietTypes);\n  const auxDietTypes = [...userInput.dietTypesArray];\n\n  const handleCheckDietTypeElement = e => {\n    dietTypes.forEach(diet => {\n      if (diet === e.target.value) {\n        if (e.target.checked) {\n          auxDietTypes.push(e.target.value);\n        } else {\n          const index = auxDietTypes.indexOf(e.target.value);\n          console.log(index);\n\n          if (index !== -1 && auxDietTypes.length > 0) {\n            auxDietTypes.splice(index, 1);\n          }\n        }\n      }\n    });\n    console.log(auxDietTypes);\n    setInput(prevState => {\n      return { ...prevState,\n        dietTypesArray: auxDietTypes\n      };\n    });\n  };\n\n  const inputHandler = e => {\n    if (e.target.name === \"name\") {\n      setInput(prevState => {\n        return { ...prevState,\n          name: e.target.value\n        };\n      });\n    }\n\n    if (e.target.name === \"summary\") {\n      setInput(prevState => {\n        return { ...prevState,\n          summary: e.target.value\n        };\n      });\n    }\n\n    if (e.target.name === \"steps\") {\n      setInput(prevState => {\n        return { ...prevState,\n          steps: e.target.value\n        };\n      });\n    }\n\n    if (e.target.name === \"score\") {\n      setInput(prevState => {\n        return { ...prevState,\n          score: e.target.value\n        };\n      });\n    }\n\n    if (e.target.name === \"healthScore\") {\n      setInput(prevState => {\n        return { ...prevState,\n          healthScore: e.target.value\n        };\n      });\n    }\n  };\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"loading-message\",\n      children: \"Adding recipe please wait....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 12\n    }, this);\n  }\n\n  const DietOptions = dietTypes.map((e, index) => /*#__PURE__*/_jsxDEV(\"label\", {\n    for: `opt${index}`,\n    className: \"radio\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: `opt${index}`,\n      className: \"radio-input\",\n      name: \"diets\",\n      value: e,\n      onClick: handleCheckDietTypeElement\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"radio__radio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), e]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: \"Add your own recipe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Recipe's name*:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: `input ${recipeNameIsValid ? \"invalid\" : \"\"}`,\n          type: \"text\",\n          name: \"name\",\n          value: userInput.name,\n          onChange: inputHandler,\n          onBlur: onBlurHandlerValidation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Recipe's score:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input\",\n          type: \"number\",\n          name: \"score\",\n          value: userInput.score,\n          onChange: inputHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Recipe's health score:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input\",\n          type: \"number\",\n          name: \"healthScore\",\n          value: userInput.healthScore,\n          onChange: inputHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Recipe's summary*:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: `textarea ${summaryIsValid ? \"invalid\" : \"\"}`,\n          value: userInput.summary,\n          name: \"summary\",\n          onChange: inputHandler,\n          onBlur: onBlurHandlerValidation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Recipe's steps:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"textarea\",\n          name: \"steps\",\n          value: userInput.steps,\n          onChange: inputHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"checkbox-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: \"Select the diet or diets for your recipe:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box\",\n          children: DietOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-field\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Add Recipe\",\n          className: \"btn\",\n          onClick: submitHandler,\n          disabled: !isFormValid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), !postErr && userInput.hasBeenSubmitted && /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"loading-message\",\n      children: \"Recipe was created succesfully\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }, this), postErr && userInput.hasBeenSubmitted && /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"loading-message\",\n      children: \"Unable to create recipe, please try again!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RecipeForm, \"uF8yHwpTjBxYG/ELD2HFOXN4SiU=\", false, function () {\n  return [useSelector, useSelector, useDispatch, useSelector];\n});\n\n_c = RecipeForm;\nexport default RecipeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecipeForm\");","map":{"version":3,"sources":["/home/noe4400/Documents/react-projects/PI-FOOD-FT15a/client/src/components/ActivityForm/RecipeForm.js"],"names":["React","useEffect","useState","useDispatch","useSelector","getDietTypes","postRecipe","setLoading","RecipeForm","isLoading","state","postErr","dispatch","userInput","setInput","name","score","healthScore","summary","steps","dietTypesArray","hasBeenSubmitted","inputValidation","setInputValidation","isInputNameTouch","isSummaryInputTouched","enteredRecipesName","trim","enteredSummary","recipeNameIsValid","summaryIsValid","onBlurHandlerValidation","e","prevState","target","isFormValid","submitHandler","preventDefault","dietTypes","auxDietTypes","handleCheckDietTypeElement","forEach","diet","value","checked","push","index","indexOf","console","log","length","splice","inputHandler","DietOptions","map"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./RecipeForm.css\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getDietTypes, postRecipe, setLoading } from \"../../actions\";\n\nconst RecipeForm = () => {\n  const isLoading = useSelector((state) => state.isLoading);\n  const postErr = useSelector((state) => state.postErr);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getDietTypes());\n  }, []);\n\n  const [userInput, setInput] = useState({\n    name: \"\",\n    score: 0,\n    healthScore: 0,\n    summary: \"\",\n    steps: \"\",\n    dietTypesArray: [],\n    hasBeenSubmitted: false,\n  });\n\n  const [inputValidation, setInputValidation] = useState({\n    isInputNameTouch: false,\n    isSummaryInputTouched: false,\n  });\n\n  const enteredRecipesName = userInput.name.trim() !== \"\";\n  const enteredSummary = userInput.summary.trim() !== \"\";\n\n  const recipeNameIsValid =\n    !enteredRecipesName && inputValidation.isInputNameTouch;\n  const summaryIsValid =\n    !enteredSummary && inputValidation.isSummaryInputTouched;\n\n  const onBlurHandlerValidation = (e) => {\n    setInputValidation((prevState) => {\n      if (e.target.name === \"name\")\n        return {\n          ...prevState,\n          isInputNameTouch: true,\n        };\n      if (e.target.name === \"summary\")\n        return {\n          ...prevState,\n          isSummaryInputTouched: true,\n        };\n    });\n  };\n\n  let isFormValid = false;\n  if (enteredRecipesName && enteredSummary) {\n    isFormValid = true;\n  }\n  const submitHandler = (e) => {\n    e.preventDefault();\n    setInputValidation((prevState) => {\n      return {\n        ...prevState,\n        isInputNameTouch: false,\n        isSummaryInputTouched: false,\n      };\n    });\n    dispatch(setLoading(true));\n    dispatch(postRecipe(userInput));\n    setInput((prevState) => {\n      return {\n        ...prevState,\n        name: \"\",\n        score: 0,\n        healthScore: 0,\n        summary: \"\",\n        steps: \"\",\n        dietTypesArray: [],\n        hasBeenSubmitted: true,\n      };\n    });\n  };\n\n  const dietTypes = useSelector((state) => state.dietTypes);\n\n  const auxDietTypes = [...userInput.dietTypesArray];\n\n  const handleCheckDietTypeElement = (e) => {\n    dietTypes.forEach((diet) => {\n      if (diet === e.target.value) {\n        if (e.target.checked) {\n          auxDietTypes.push(e.target.value);\n        } else {\n          const index = auxDietTypes.indexOf(e.target.value);\n          console.log(index);\n          if (index !== -1 && auxDietTypes.length > 0) {\n            auxDietTypes.splice(index, 1);\n          }\n        }\n      }\n    });\n\n    console.log(auxDietTypes);\n    setInput((prevState) => {\n      return {\n        ...prevState,\n        dietTypesArray: auxDietTypes,\n      };\n    });\n  };\n\n  const inputHandler = (e) => {\n    if (e.target.name === \"name\") {\n      setInput((prevState) => {\n        return {\n          ...prevState,\n          name: e.target.value,\n        };\n      });\n    }\n\n    if (e.target.name === \"summary\") {\n      setInput((prevState) => {\n        return {\n          ...prevState,\n          summary: e.target.value,\n        };\n      });\n    }\n\n    if (e.target.name === \"steps\") {\n      setInput((prevState) => {\n        return {\n          ...prevState,\n          steps: e.target.value,\n        };\n      });\n    }\n\n    if (e.target.name === \"score\") {\n      setInput((prevState) => {\n        return {\n          ...prevState,\n          score: e.target.value,\n        };\n      });\n    }\n\n    if (e.target.name === \"healthScore\") {\n      setInput((prevState) => {\n        return {\n          ...prevState,\n          healthScore: e.target.value,\n        };\n      });\n    }\n  };\n  if (isLoading) {\n    return <h2 className=\"loading-message\">Adding recipe please wait....</h2>;\n  }\n  const DietOptions = dietTypes.map((e, index) => (\n    <label for={`opt${index}`} className=\"radio\" key={index}>\n      <input\n        type=\"checkbox\"\n        id={`opt${index}`}\n        className=\"radio-input\"\n        name=\"diets\"\n        value={e}\n        onClick={handleCheckDietTypeElement}\n      />\n      <div className=\"radio__radio\"></div>\n      {e}\n    </label>\n  ));\n  return (\n    <div className=\"wrapper\">\n      <div className=\"title\">Add your own recipe</div>\n      <div className=\"form\">\n        <div className=\"input-field\">\n          <label>Recipe's name*:</label>\n          <input\n            className={`input ${recipeNameIsValid ? \"invalid\" : \"\"}`}\n            type=\"text\"\n            name=\"name\"\n            value={userInput.name}\n            onChange={inputHandler}\n            onBlur={onBlurHandlerValidation}\n          />\n        </div>\n\n        <div className=\"input-field\">\n          <label>Recipe's score:</label>\n          <input\n            className=\"input\"\n            type=\"number\"\n            name=\"score\"\n            value={userInput.score}\n            onChange={inputHandler}\n          />\n        </div>\n        <div className=\"input-field\">\n          <label>Recipe's health score:</label>\n          <input\n            className=\"input\"\n            type=\"number\"\n            name=\"healthScore\"\n            value={userInput.healthScore}\n            onChange={inputHandler}\n          />\n        </div>\n        <div className=\"input-field\">\n          <label>Recipe's summary*:</label>\n          <textarea\n            className={`textarea ${summaryIsValid ? \"invalid\" : \"\"}`}\n            value={userInput.summary}\n            name=\"summary\"\n            onChange={inputHandler}\n            onBlur={onBlurHandlerValidation}\n          ></textarea>\n        </div>\n\n        <div className=\"input-field\">\n          <label>Recipe's steps:</label>\n          <textarea\n            className=\"textarea\"\n            name=\"steps\"\n            value={userInput.steps}\n            onChange={inputHandler}\n          ></textarea>\n        </div>\n\n        <div className=\"checkbox-container\">\n          <div className=\"title\">Select the diet or diets for your recipe:</div>\n          <div className=\"box\">{DietOptions}</div>\n        </div>\n\n        <div className=\"input-field\">\n          <input\n            type=\"submit\"\n            value=\"Add Recipe\"\n            className=\"btn\"\n            onClick={submitHandler}\n            disabled={!isFormValid}\n          />\n        </div>\n      </div>\n      {!postErr && userInput.hasBeenSubmitted && (\n        <h2 className=\"loading-message\">Recipe was created succesfully</h2>\n      )}\n      {postErr && userInput.hasBeenSubmitted && (\n        <h2 className=\"loading-message\">\n          Unable to create recipe, please try again!\n        </h2>\n      )}\n    </div>\n  );\n};\n\nexport default RecipeForm;\n"]},"metadata":{},"sourceType":"module"}